<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="lq.mapper.UserMapper">

    <resultMap id="BaseResultMap" type="lq.entity.User">
        <id property="userId" column="user_id" jdbcType="BIGINT"/>
        <result property="deptId" column="dept_id" jdbcType="BIGINT"/>
        <result property="userName" column="user_name" jdbcType="VARCHAR"/>
        <result property="nickName" column="nick_name" jdbcType="VARCHAR"/>
        <result property="userType" column="user_type" jdbcType="VARCHAR"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="phonenumber" column="phonenumber" jdbcType="VARCHAR"/>
        <result property="sex" column="sex" jdbcType="CHAR"/>
        <result property="avatar" column="avatar" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="status" column="status" jdbcType="CHAR"/>
        <result property="delFlag" column="del_flag" jdbcType="CHAR"/>
        <result property="loginIp" column="login_ip" jdbcType="VARCHAR"/>
        <result property="loginDate" column="login_date" jdbcType="TIMESTAMP"/>
        <result property="createBy" column="create_by" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="VARCHAR"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        user_id,dept_id,user_name,
        nick_name,user_type,email,
        phonenumber,sex,avatar,
        password,status,del_flag,
        login_ip,login_date,create_by,
        create_time,update_by,update_time,
        remark
    </sql>

    <update id="updateUser" parameterType="lq.entity.User">
        update sys_user
        <set>
            <if test="deptId != null">dept_id=#{deptId},</if>
            <if test="userName != null">user_name=#{userName},</if>
            <if test="nickName != null">nick_name=#{nickName},</if>
            <if test="email != null">email=#{email},</if>
            <if test="phonenumber != null">phonenumber=#{phonenumber},</if>
            <if test="sex != null">sex=#{sex},</if>
            <if test="avatar != null">avatar=#{avatar},</if>
            <if test="password != null">password=#{password},</if>
            <if test="status != null">status=#{status},</if>
            <if test="delFlag != null">del_flag=#{delFlag},</if>
            <if test="remark != null">remark=#{remark},</if>
            <if test="updateBy != null">update_by=#{updateBy},</if>
            <if test="updateTime != null">update_time=#{updateTime},</if>
        </set>
        where user_id=#{userId}
    </update>

    <delete id="deleteUserRole" parameterType="long">
        delete from sys_user_role where user_id=#{userId}
    </delete>

    <insert id="insertUserRole" parameterType="map">
        insert into sys_user_role (user_id, role_id) values
        <foreach collection="roleIds" item="roleId" separator=",">
            (#{userId}, #{roleId})
        </foreach>
    </insert>

    <insert id="insertUserRoles" parameterType="map">
        insert into sys_user_role (user_id, role_id)
        values
        <foreach collection="roles" item="role" separator=",">
            (#{userId}, #{role.roleId})
        </foreach>
    </insert>


    <update id="updateUserDept" parameterType="lq.entity.User">
        update sys_user set dept_id=#{dept.deptId} where user_id=#{userId}
    </update>


    <update id="updateUsers" parameterType="lq.entity.User">
        update sys_user
        <set>
            <if test="deptId != null">dept_id=#{deptId},</if>
            <if test="userName != null">user_name=#{userName},</if>
            <if test="nickName != null">nick_name=#{nickName},</if>
            <if test="email != null">email=#{email},</if>
            <if test="phonenumber != null">phonenumber=#{phonenumber},</if>
            <if test="sex != null">sex=#{sex},</if>
            <if test="avatar != null">avatar=#{avatar},</if>
            <if test="password != null">password=#{password},</if>
            <if test="status != null">status=#{status},</if>
            <if test="delFlag != null">del_flag=#{delFlag},</if>
            <if test="remark != null">remark=#{remark},</if>
            <if test="updateBy != null">update_by=#{updateBy},</if>
            <if test="updateTime != null">update_time=#{updateTime},</if>
        </set>
        where user_id=#{userId}
    </update>


    <select id="getUserPage" resultType="lq.entity.User">
        select * from sys_user where email=#{email} and del_flag=0
    </select>

    <select id="selectPageVo" parameterType="string"
            resultType="lq.entity.User">
        select * from sys_user where nick_name like concat('%',#{nickName},'%')
    </select>

    <select id="selectUserById" parameterType="Long" resultMap="BaseResultMap">
        select * from sys_user where user_id = #{userId}
    </select>


</mapper>
